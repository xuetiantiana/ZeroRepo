!function(){function e(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,c,l=[],i=!0,u=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;i=!1}else for(;!(i=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);i=!0);}catch(e){u=!0,o=e}finally{try{if(!i&&null!=r.return&&(c=r.return(),Object(c)!==c))return}finally{if(u)throw o}}return l}}(e,t)||r(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){if(e){if("string"==typeof e)return n(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}System.register([],(function(r,n){"use strict";return{execute:function(){r("g",(function t(r){if(!r.children||0===r.children.length)return 1;var n=r.children.map((function(e){return t(e)}));return 1+Math.max.apply(Math,e(n))}));r("h",(function(r,a){var c=0,l=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"root",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4?arguments[4]:void 0,u=n?"".concat(n,"/").concat(r):r;if(Array.isArray(e))return e.map((function(e){var t=a+1;return{name:e,feature_path:"".concat(u,"/").concat(e),id:c++,level:t,level1Root:i}}));if("object"===o(e)&&null!==e){for(var f=[],s=function(){var e=t(y[h],2),r=e[0],n=e[1];if(Array.isArray(n))f.push({name:r,feature_path:"".concat(u,"/").concat(r),id:c++,level:a,level1Root:i,children:n.map((function(e){var t=a+1;return{name:e,feature_path:"".concat(u,"/").concat(r,"/").concat(e),id:c++,level:t,level1Root:i}}))});else if("object"===o(n)){var s=l(n,r,u,a+1,i);Array.isArray(s)?f.push({name:r,feature_path:"".concat(u,"/").concat(r),id:c++,level:a,level1Root:i,children:s}):f.push({name:r,feature_path:"".concat(u,"/").concat(r),id:c++,level:a,children:s.children||[]})}},h=0,y=Object.entries(e);h<y.length;h++)s();return f}return{name:e,feature_path:u}};if(r&&r.subtrees&&r.subtrees.length>0){var i=[],u=["Data Engineering","Algorithms","Advanced Modeling Techniques","Workflow"];e(r.subtrees).sort((function(e,t){var r=u.indexOf(e.name),n=u.indexOf(t.name);return-1===r&&-1===n?0:-1===r?1:-1===n?-1:r-n})).forEach((function(e,t){if(e.refactored_subtree){var r=e.name||"Subtree_".concat(t+1),n=l(e.refactored_subtree,r,"",2,r),o={name:r,feature_path:"".concat(r),id:c++,level:1,children:n,level1Root:r};i.push(o)}}));var f={name:"root",feature_path:"root",id:c++,level:0,children:i,visible:!0};return console.log("!!!!",i),console.log("数据转换完成:",f),console.log("处理了 ".concat(i.length," 个subtree组")),n(f,a),console.log(f),f}return console.warn("数据格式不正确，使用默认数据"),r}));var n=function(e,t){if(e&&t){var r=function(e){e&&(n(e,t),e.children&&Array.isArray(e.children)&&e.children.forEach((function(e){return r(e)})))},n=function(e,t){if(e.feature_path){var r=t.metadata||t,n=e.level1Root||a(e.feature_path);if(r[n]){var c=r[n];if(Array.isArray(c)){var l=c.find((function(t){if("object"===o(t)&&null!==t){var r=t.feature_path===e.feature_path,n=t.node===e.name;return r||n}return!1}));l?(e.metaData=l,console.log("为节点 ".concat(e.name," 找到匹配数据:"),l)):console.log("未找到节点 ".concat(e.name," 的匹配数据, feature_path: ").concat(e.feature_path))}else"object"===o(c)&&c[e.feature_path]&&(e.metaData=c[e.feature_path],console.log("为节点 ".concat(e.name," 找到对象数据:"),c[e.feature_path]))}else console.log("未找到根键 ".concat(n," 在mapData中"))}else console.warn("节点缺少 feature_path:",e)},a=function(e){return e&&e.split("/").find((function(e){return e&&"root"!==e}))||""};return Array.isArray(e)?e.forEach((function(e){return r(e)})):r(e),console.log("节点数据匹配完成"),e}console.warn("treeData 或 mapData 为空")}}}}))}();
